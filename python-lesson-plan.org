* Python Lesson Plans
** Choose your weapon (Or what you will need).
*** Text Editor
The choice of text editor is one of the most hotly debated and least 
important topics in programming. For this course you will, however, 
need to pick one. Personally I use [[https://www.gnu.org/software/emacs/][Emacs]] with the [[https://github.com/syl20bnr/spacemacs][Spacemacs]] package, but
I would warn you that Emacs is software that is a bit archaic and some 
find complicated to use when used to modern software. If you're looking 
for a more modern editor that is an easy jumping off point I would 
recommend [[https://atom.io][Atom]]. If you want an [[https://en.wikipedia.org/wiki/Integrated_development_environment][IDE]] there is a free version of [[https://www.jetbrains.com/pycharm/][PyCharm]]

Ultimately the choice is not that big of a deal. Pick from the list
above or find your own, there is abundance of options available and you
can always switch later. (I know I've switched multiple times!)
*** Python Interpreter
We will talk more about what the interpreter is and what it does later,
but for now you need to get it installed. For these lessons we will be
using CPython which is the official interpreter found at 
https://www.python.org/ download Version 3. 

Note for Linux Users:
If you're on a Linux
Distro (woot woot) you can use your package manager. Most major distros
provide Python v3.X via a package named python3, otherwise consult your
distro's documentation.

Note for Mac Users:
If you're running Mac OS X and you have homebrew installed you can
install python 3 via

#+BEGIN_SRC bash
brew install python3
#+END_SRC

*** Pip and Virtualenv
These are tools we will use later however they are pretty excellent to
have now. Pip should already be installed when you install CPython so
just upgrade it:

Mac OS X / Linux:
#+BEGIN_SRC bash
pip install -U pip
#+END_SRC

Windows:
#+BEGIN_SRC bash
python -m pip install -U pip
#+END_SRC
*** Coding Style Guide
We will be coding according to the [[https://www.python.org/dev/peps/pep-0008/][PEP8 Style Guide]]

Additionally we will be using the [[https://www.emacswiki.org/emacs/EightyColumnRule][80 Column-rule]] though pretty loosely.
You should turn on "Wrapping at preferred length" for whichever text
editor you chose.

And finally, the golden rule, TYPE EVERY LINE OF CODE IN THESE LESSONS.
SERIOUSLY. TYPE IT OUT. DONT COPY AND PASTE.

I've intentionally made the code samples as concise as possible, so
make sure you take the time to type them out, it will help you learn
even if you think it won't.
** Syntactic Sugar (We must read before we can write.)
*** Lesson 1
**** A brief aside about syntax
The thing that makes Python an awesome programming language is that it
has very little actual "syntax". If you're unaware of what syntax is no
worries. Syntax is a character or symbol which has only meaning to the
computer. Such as parentheses in Math. You can use the syntax of parens
in math to seperate calculations from one another for example:

2 + 3 / 5 =/= (2 + 3) / 5

The parentheses have special meaning in the context. The syntax of a 
programming language is much the same.
**** Let's write our first code!
Python, like all scripting languages, is interpreted. This means naturally
that there is an interpreter! The python command will start this
interpreter and we can type Python code directly into it (which is pretty
cool). So run the python command and you should see:

#+BEGIN_SRC bash
Python 3.5.1 (default, Jul 14 2015, 19:46:27)
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>>
#+END_SRC

Or something very similar. The >>> is the prompt where you can type code
and see it be executed! Try it now type 5 then press enter.

#+BEGIN_SRC python
>>> 5
5
>>>
#+END_SRC

Sweet right? If you type 5 + 10, what do you think will happen? Once
you have a guess try it out!

**** A brief trip back to 6th grade math
If you've ever heard that programming and math are related, that's
because they are. Though you make the computer do all the actual math for
you so don't let that scare you.

In school when you started basic algebra which introduced "variables"
So you could write an expression like: x + 10 then if I told you that
x = 2 you would know that this expression solves to 12. Here we used
x as a placeholder value and in programming we do the same thing.

Variables in programming are easier to reason about if you think of them
like buckets. When you make a variable you're creating a bucket and
labeling it so you can reference it's contents later.

To declare a variable in Python you simply type:

#+BEGIN_SRC python
>>> variable = 10
#+END_SRC

Now if you type:

#+BEGIN_SRC python
>>> variable + 10
#+END_SRC

You should see 20 printed to the screen, see how it works?

The cool thing about variables in programming is that they can hold
more than just numbers, now would be a good time to talk about Data Types.
**** Types and duck-typing
In Python there are a few "primitive types":

*Integers*
Are simple whole numbers or "counting numbers" 1, 2, 3 but not 1.12 etc.
*Floats*
Are numbers that contain a decimal point such as 1.23 or 2.34 or 3.14
*Booleans*
These are True or False, you will use these a lot as switches. 
(Note: that true and false are not booleans. Capitalization matters!)
*Strings*
Strings are "strings of characters" as a matter of fact that previous 
statement in quotes is itself a string. In Python any characters between
double quotes is considered a string.

We can store anything of these types in a variable so lets make some!
Try typing all of these into your interpreter.

>>> na = "Na"
>>> batman = " Batman!"
>>> num1 = 5
>>> num2 = 6
>>> float1 = 1.2
>>> float2 = 3.14
>>> this_is_python = True

Now since Python is a dynamically typed language it doesn't enforce any
checks on what you can put into a variable. So a variable really is a 
generic bucket.

But what happens if you multiply a string by 16? What happens when you 
add two strings?
Try typing this into your interpreter (See if you can guess what will 
happen first):

>>> na * 16 + batman


....


Pretty cool right? When you multiply a string, Python will create a new
string where the original is repeated that many times and adding a string
simply "mushes" the two strings together!

What if you add an integer to a string?

>>> batman + 10


...

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Can't convert 'int' object to str implicitly

Whoops! It didn't like that very much! Look at the error message:
TypeError: Can't convert 'int' object to str implicitly

Can you figure out what it's telling you?

Basically, it's saying I don't know how to add an integer type to a 
string type so you've given me invalid input.

Python will do a "type conversion" for you if it's one that it knows
internally to do automatically. For example adding an integer and a float:

>>> num1 + float2

...

You got 8.14 right? That's a float! So Python knows that when adding an
int and a float to convert the int to a float first.

Generally speaking Python will do what you expect with types, but be
on the lookout for nasty TypeError's that usually means you're not
recieving a value that your expecting.
**** A final note on variables
I know it seems like we're spending a ton of time on variables but that's
because you will use them in EVERY SINGLE python program you write.

The last couple tricks I want to show you are pretty vital so make sure
you understand all of it before moving on.

You can increment or decrement an integer / float variable like so:

>>> num1 = 5
>>> num1 += 1
>>> num1
6

If you reverse the signage you will decrement the variable:

>>> num1 -= 1
>>> num1
5

You can reassign a variable to another value, and since Python is duck
typed you can reassign it to a value of a different type.

>>> num1 = 5
>>> num1 = "A number"

And that's completely valid (though bad practice unless you have a VERY
good reason.)

You can set a variable to the value of another variable then they act
indenpendently. For example:

>>> num1 = 5
>>> num2 = num1
>>> num1 += 5
>>> num1
10
>>> num2
5

You can set the value of a variable to the result of an operation, such
as a function call (foreshadowing) or math. This can include another
variable as well, for example:

>>> num1 = 5
>>> num2 = 5
>>> num3 = 10 + 3
>>> num4 = num2 + 8
>>> num3
13
>>> num4
13
>>> num2
5

**** Homework
1. Play with variables of different types, see what adding / subtracting
/ multiplying / dividing does when you go across types or when acting
on the same type.
2. Assign some variables to the results of another variable. Make sure
you understand how this works.
3. Look up Camel Case, Snake Case, and Pascal Case. Make sure you
understand why we name variables the way we do, i.e. 
my_variable = 3
not
my variable = 3
*** Lesson 2
**** Your first script
Ok we're going to actually step out of the interpreter and start writing
full programs now.

First make a file named hello.py

Now open that file in your text editor and at the top write

#+BEGIN_SRC python
#!/usr/bin/env python3
#+END_SRC

This is called a *shebang line* it tells the computer what interpreter
to use when executing this script.

Next let's write a line which makes a variable for your_name and set
it equal to a string of your name. My script now looks like this:

#+BEGIN_SRC python
#!/usr/bin/env python3

your_name = "Mathew"
#+END_SRC

Now previously in the interpreter if you wanted to see the value of a
variable you simply typed the name of that variable and it spit it out.

If you try to do that here you will be dissapointed, when working
directly with the interpreter it behaves slightly differently than
when it is interpreting a script. Now if you want text to print to the
screen you need to use the print function.

We haven't really talked about functions yet but here's how you call
print:

#+BEGIN_SRC python
#!/usr/bin/env python3

your_name = "Mathew"
print(your_name)
#+END_SRC

Now if you run that you should see your name printed to the terminal
screen. You can run the script by passing it to the python3 command
in your terminal:

#+BEGIN_SRC bash
$ python3 hello.py
#+END_SRC

**** Putting the FUN in FUNction
So we named this script hello.py but it doesn't really say hello, it
just prints the name we put in your_name, which isn't very exciting.

So now we are going to make our script say "Hello your_name"

To do this we are going to write a function. A function in programming
is a set of code that takes some number of arguments (sometimes called 
parameters) does something with those arguments and optionally returns
a value. If this sounds confusing, it's not once you see it in action.

We've already called a function in our last section, the print function.
Calling a function is as simple as writing the name of the function
with parentheses, then putting the arguments in those parentheses.

#+BEGIN_SRC python
# No arguments
print()

# With 1 argument
print("Arg1")

# With 2 arguments
print("Arg1", "Arg2")
#+END_SRC

Now I've snuck in one more new concept we'll need going forward,
comments. Any line in python preceded by a # symbol will be skipped
by the interpreter so you can use it write notes to yourself about
what a certain bit of code does. My personal opinion is to use comments
judiciously because it is always hard to put yourself back into the
same place you were when you wrote a bit of code. It's also nice for
others who might have to read your code in the future.

So now that we know how to call a function we need to write one
ourselves. Let's start with a function for saying hello to a name.
Add this code towards the top of your script (before your_name but 
after the shebang)

#+BEGIN_SRC python
def say_hello(name):
    print("Hello" + name)
#+END_SRC

Let's break down this new syntax.

#+BEGIN_SRC python
def say_hello(name):
#+END_SRC

*def* is a keyword in python. A keyword is a word that has special
meaning to the interpreter and cannot be used for anything but that
you might also hear the term "reserved word"

The *def* keyword specifies that we are *def*-ining a function.
following the *def* we put the name of our function followed by
parens, in this case, say_hello()

Inside the parentheses we put the arguments we are expecting, in this
case we are expecting a name. Now the name of the argument isn't
important here since it will be substituted with whatever the caller
gives us. We could have easiy written:

#+BEGIN_SRC python
def say_hello(fart):
#+END_SRC

And it would still work the same.

Finally we add a : to the end of the line. This tells Python that
everything after this which is indented is part of this "code block"
or function.

#+BEGIN_SRC python
    print("Hello" + name)
#+END_SRC

Finally we write the "body" of our function. Everything after our
def line that is indented 4 spaces will be considered part of our
function so our function could be multiple lines of code.

Now let's change our print line from the last section to calling our
new function:

#+BEGIN_SRC python
#!/usr/bin/env python3

def say_hello(name):
    print("Hello" + name)

your_name = "Mathew"
say_hello(your_name)
#+END_SRC

**** Return from whence you came
In the last section I mentioned that functions can optionally return a
value and now we're going to show you how.

So like before let's define a new function, let's call it add and it
will take two arguments, sum them then return the result.

#+BEGIN_SRC python
def add(x, y):
    return x + y
#+END_SRC

Now we can do something like:

#+BEGIN_SRC python
sum = add(5, 3)
print(sum) # prints the number 8
#+END_SRC

And since Python is duck typed we can do this as well:

#+BEGIN_SRC python
sum = add("Abraham", " Lincoln")
print(sum) # prints Abraham Lincoln
#+END_SRC

See how x and y are simply substituted with whatever arguments are
passed into the function? Then the return value is substituted
wherever the function as called.

An important note about returns is they end execution of the function.
So that if you put any code after a return it will not be executed:

#+BEGIN_SRC python
def add(x, y):
    return x + y
    x + 10 + y # This line never gets executed.
#+END_SRC
