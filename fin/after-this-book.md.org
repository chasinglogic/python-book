* Welcome to the awkward stage of intermediate programmer.
  :PROPERTIES:
  :CUSTOM_ID: welcome-to-the-awkward-stage-of-intermediate-programmer.
  :END:

When I first taught myself how to program I entered what I would come to
refer to as the "Middle School" of programming. I just hit "programmer
puberty" and I was brimming with knowledge but no direction of how to
apply it. I went on a journey in search of a purpose, a way to use these
skills I had learned, none of the books or tutorials I found where very
helpful, none of them had this section that I'm writing right now.

I went from language to language reading forum posts about programming
telling me why Python was bad and I should learn Node.js and why Node.js
was bad and I should learn Golang, or why real programmers use C. So I
learned a LOT of programming languages, and I didn't build anything.

Now that I'm 6 years in and I've come full circle where I just write in
the language that is the easiest for the job I've realized that there is
no silver bullets in software development. You might run into a problem
you're trying to solve and you get 50% of the way through and realize
you need concurrency but you've been writing in Python, so you say screw
it and switch to Go but then realize that static typing is a real pain
so you pick up Clojure which does concurrency and dynamic typing but
then find out the JVM isn't lightweight and Lisp is weird.... etc. etc.
etc. until the rabbit hole never stops.

The point here is not that you shouldn't choose the Right Tool For the
Jobâ„¢ but that most of the time even the right tool will still have parts
that feel like slogging through mud.

And don't think I'm discrouaging you from picking up other programming
languages, I'm not because at this point in your journey it might be the
best way for you to learn, you can see more of how to do Functional
Programming using [[https://elixir-lang.org][Elixir]], or how if done
right Concurrency is really easy such as in [[https://golang.org][Go]],
or if you want to make interactive web applications you need to learn
[[https://javascript.com][Javascript]].

But my point is don't switch languages because you were building
something and it got to a point where it's difficult, you'll just be
moving that difficulty to somewhere else in your program by switching
and you'll never master
[[https://www.amazon.com/Effective-Programming-More-Than-Writing-ebook/dp/B008HUMTO0][The
Art of Getting Shit Done]]. Which I think is the best skill to have.

And my final advice is never be afraid to read. Read the docs, read the
source, read Stack Overflow. Googling how to do something and taking an
answer from Stack Overflow does NOT make you a bad programmer or mean
your stupid. Every developer does it every single day. If you ever see a
programmer write a bunch of code they didn't read any documentation for
it's because they've read the documentation so many times they memorized
it. Not because they just "think the right way". Since we're already
dropping Jeff Atwood links in this section I'll leave you with these two
final notes on the subject
[[https://blog.codinghorror.com/learn-to-read-the-source-luke/][Read the
Source Luke]] and
[[https://blog.codinghorror.com/never-design-what-you-can-steal/][Good
Programmers Never Write What They Can Steal.]]
