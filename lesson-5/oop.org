#+OPTIONS: toc:nil

* Object Oriented Programming
  We're going to take a break from our todo app to talk concepts.

  Object Oriented Programming (OOP) is a [[https://en.wikipedia.org/wiki/Programming_paradigm][Programming Paradigm]] which is
  a way to describe how to solve a problem. OOP is based around
  *objects*, which seems obvious. The definition of an object is:

  #+BEGIN_QUOTE
  An instance of a *class* which contains attributes (data) and
  methods (functions).
  #+END_QUOTE

  A class in Python is like a blueprint for how to build an
  object. The purpose of a class is to create a data structure which
  represents something particularly complicated, or to tie data and
  functionality together. I'm going to use the same example we used in
  lesson 3, how do we represent a person in code? If you remember we
  used a dictionary to capture some data about the person:

  #+BEGIN_SRC python
    me = {
	'full_name': "Mathew Robinson",
	'age': 24,
	'eye_color': "Brown",
	'hair_color': "Black",
	'has_siblings': True,
    }
  #+END_SRC

  But this isn't a complete picture because even if we captured all of
  the physical descriptors of a person it still doesn't account for
  the fact that a person can /do stuff/.
